{
	"info": {
		"_postman_id": "7c492d9a-51d3-4546-8d25-9c4445708012",
		"name": "iudx-aaa-server",
		"description": "# Introduction\nWhat does your API do?\n\n# Overview\nThings that the developers should know about\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests an user can send?",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Token",
			"item": [
				{
					"name": "Create Token",
					"item": [
						{
							"name": "create Token- clientId [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret"
									},
									{
										"key": "clientSecret",
										"value": "{{clientSecret}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"itemId\": \"example.com/79e7bfa62fad6c765bac69154c2f24c94c95220a/resource-group\",\r\n    \"itemType\": \"resource_group\",\r\n    \"role\": \"consumer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/token",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create Token- token [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret",
										"disabled": true
									},
									{
										"key": "clientSecret",
										"value": "{{clientSecret}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"itemId\": \"example.com/79e7bfa62fad6c765bac69154c2f24c94c95220a/resource-group\",\r\n    \"itemType\": \"resource_group\",\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/token",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create Token-MissingToken [401]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret",
										"disabled": true
									},
									{
										"key": "clientSecret",
										"value": "{{clientSecret}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"itemId\": \"example.com/79e7bfa62fad6c765bac69154c2f24c94c95220a/resource-group\",\r\n    \"itemType\": \"resource_group\",\r\n    \"role\": \"consumer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/token",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create Token-MissingClientId [401]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:MissingAuthenticationToken\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret",
										"disabled": true
									},
									{
										"key": "clientSecret",
										"value": "{{clientSecret}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"itemId\": \"example.com/79e7bfa62fad6c765bac69154c2f24c94c95220a/resource-group\",\r\n    \"itemType\": \"resource_group\",\r\n    \"role\": \"consumer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/token",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create Token- InvalidRole [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidRole\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret"
									},
									{
										"key": "clientSecret",
										"value": "{{clientSecret}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"itemId\": \"example.com/79e7bfa62fad6c765bac69154c2f24c94c95220a/resource-group\",\r\n    \"itemType\": \"resource_group\",\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/token",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create Token- InvalidItemType [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret"
									},
									{
										"key": "clientSecret",
										"value": "{{clientSecret}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"itemId\": \"example.com/79e7bfa62fad6c765bac69154c2f24c94c95220a/resource-group\",\r\n    \"itemType\": \"resource_group11\",\r\n    \"role\": \"consumer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/token",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create Token- InvalidItemID [400] Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "clientId",
										"value": "{{clientId}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret"
									},
									{
										"key": "clientSecret",
										"value": "{{clientSecret}}",
										"type": "text",
										"description": "Use Authorization header or clientId or clientSecret"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"itemId\": \"example.com/79e7bfa62fad6c765bac69154c2f24c94c95220a/resource-group1\",\r\n    \"itemType\": \"resource_group\",\r\n    \"role\": \"consumer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/token",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Introspect Token",
					"item": [
						{
							"name": "Introspect Token [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accessToken\": \"{{tip_jwt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/introspect",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token- Expired [401]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidAuthenticationToken\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accessToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJzdWIiOiIzNDliNGI1NS0wMjUxLTQ5MGUtYmVlOS0wMGYzYTVkM2U2NDMiLCJpc3MiOiJhdXRoLnRlc3QuY29tIiwiYXVkIjoidGVzdC5jYXQuY29tIiwiZXhwIjoxNjIzOTA1MTY2LCJuYmYiOjE2MjM5MDQ1NjYsImlhdCI6MTYyMzkwNDU2NiwianRpIjoiYTcyODQ4MGYtOGQwZS00OTgyLTg3NWYtNmFhMzgzMjY1MzE2IiwiaXRlbV9pZCI6Iml0ZW0tMSIsIml0ZW1fdHlwZSI6IlJlc291cmNlR3JvdXAiLCJyb2xlIjoicHJvdmlkZXIiLCJjb25zdHJhaW50cyI6e319.YsRL87QZ68m-A1ALhAA2IdhM6BgxMjfeQxCRhf9Q2pajtFtuJGYCbcCd71xswXIRM4L7WS05vznevd5JdxKkvQ\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/introspect",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"introspect"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Revoke Token",
					"item": [
						{
							"name": "Revoke Token- token [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"clientId\" :\"349b4b55-0251-490e-bee9-00f3a5d3e643\",\r\n    \"rsUrl\" :\"foobar.iudx.io\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/token/revoke",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"token",
										"revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke Token- InvalidRsUrl [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"clientId\" :\"349b4b55-0251-490e-bee9-00f3a5d3e643\",\r\n    \"rsUrl\" :\"foobar.iudx.in\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/token/revoke",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"token",
										"revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke Token- InvalidClientId [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"clientId\" :\"349b4b55-0251-490e-bee9-00f3a5d3e633\",\r\n    \"rsUrl\" :\"foobar.iudx.io\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/token/revoke",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"token",
										"revoke"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Create User",
					"item": [
						{
							"name": "Success [201]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\n        \"provider\",\n        \"consumer\",\n        \"delegate\"\n    ],\n    \"orgId\": \"ea51dfff-dd8b-4528-8c0c-5881a482e825\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidOrgId- UUID [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\n        \"provider\",\n        \"consumer\",\n        \"delegate\"\n    ],\n    \"orgId\": \"894777b1-e82a-4cf8-b99a-86fc3d7d707x\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "DuplicateRoles [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\n        \"provider\",\n        \"consumer\",\n        \"delegate\",\n        \"delegate\"\n    ],\n    \"orgId\": \"894777b1-e82a-4cf8-b99a-86fc3d7d707b\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "DuplicateUserProfile [409]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\n        \"provider\",\n        \"consumer\",\n        \"delegate\"\n    ],\n    \"orgId\": \"894777b1-e82a-4cf8-b99a-86fc3d7d707b\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidRoles [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\n        \"aaa\"\n    ],\n    \"orgId\": \"894777b1-e82a-4cf8-b99a-86fc3d7d707b\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "MissingRoles [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgId\": \"894777b1-e82a-4cf8-b99a-86fc3d7d707b\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update User",
					"item": [
						{
							"name": "Success [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\n        \"consumer\",\n        \"delegate\"\n    ],\n    \"orgId\": \"894777b1-e82a-4cf8-b99a-86fc3d7d707b\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlreadyExistsRoles [409]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\n        \"consumer\"\n    ],\n    \"orgId\": \"894777b1-e82a-4cf8-b99a-86fc3d7d707b\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidOrgId- UUID [400] Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\n        \"provider\",\n        \"consumer\",\n        \"delegate\"\n    ],\n    \"orgId\": \"894777b1-e82a-4cf8-b99a-86fc3d7d707x\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "DuplicateRoles [400] Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\n        \"provider\",\n        \"consumer\",\n        \"delegate\",\n        \"delegate\"\n    ],\n    \"orgId\": \"894777b1-e82a-4cf8-b99a-86fc3d7d707b\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidRoles [400] Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roles\": [\n        \"aaa\"\n    ],\n    \"orgId\": \"894777b1-e82a-4cf8-b99a-86fc3d7d707b\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "MissingRoles [400] Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orgId\": \"894777b1-e82a-4cf8-b99a-86fc3d7d707b\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List User",
					"item": [
						{
							"name": "List User Profile- clientId [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "List User Profile- token [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/user/profile",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"user",
										"profile"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Organization",
			"item": [
				{
					"name": "Organization details- token[200]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{host}}:{{port}}/auth/v1/organizations",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"v1",
								"organizations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Create Organization",
					"item": [
						{
							"name": "Create organization- Success [201]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Example\",\n    \"url\":\"example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/auth/v1/admin/organizations",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"auth",
										"v1",
										"admin",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create organization- AlreadyExists [409]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:AlreadyExists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Example\",\n    \"url\":\"example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/auth/v1/admin/organizations",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"auth",
										"v1",
										"admin",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create organization- missingUrl [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Example\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/auth/v1/admin/organizations",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"auth",
										"v1",
										"admin",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create organization- InvalidName [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"Example#@\",\n    \"url\":\"example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/auth/v1/admin/organizations",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"auth",
										"v1",
										"admin",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create organization- missingName [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name1\":\"Example\",\n    \"url\":\"example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}/auth/v1/admin/organizations",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"auth",
										"v1",
										"admin",
										"organizations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update ProviderReg",
					"item": [
						{
							"name": "Update ProviderReg- Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"userId\": \"844e251b-574b-46e6-9247-f76f1f70a637\",\n        \"status\": \"approved\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/admin/provider/registrations",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"admin",
										"provider",
										"registrations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProviderReg- notPending [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"userId\": \"844e251b-574b-46e6-9247-f76f1f70a637\",\n        \"status\": \"approved\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/admin/provider/registrations",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"admin",
										"provider",
										"registrations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProviderReg- invalidFormat [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"844e251b-574b-46e6-9247-f76f1f70a637\",\n    \"status\": \"approved\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/admin/provider/registrations",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"admin",
										"provider",
										"registrations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProviderReg- invalidStatus [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"userId\": \"844e251b-574b-46e6-9247-f76f1f70a637\",\n        \"status\": \"aa\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/admin/provider/registrations",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"admin",
										"provider",
										"registrations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProviderReg- missingStatus [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"userId\": \"844e251b-574b-46e6-9247-f76f1f70a637\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/admin/provider/registrations",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"admin",
										"provider",
										"registrations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProviderReg- invalidUserId [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"userId\": \"844e251b-574b-46e6-9247-f76f1f70a1q\",\n        \"status\": \"approved\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/admin/provider/registrations",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"admin",
										"provider",
										"registrations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ProviderReg- missingUserId [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"status\": \"approved\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/admin/provider/registrations",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"admin",
										"provider",
										"registrations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List ProviderReg",
					"item": [
						{
							"name": "Provider Registrations- filter [200]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/admin/provider/registrations?filter=approved",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"admin",
										"provider",
										"registrations"
									],
									"query": [
										{
											"key": "filter",
											"value": "approved"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Provider Registrations- InvalidFilter [400]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"type\", \"urn:dx:as:InvalidInput\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{host}}:{{port}}{{base}}/admin/provider/registrations?filter=approve",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}{{base}}",
									"path": [
										"admin",
										"provider",
										"registrations"
									],
									"query": [
										{
											"key": "filter",
											"value": "approve"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Update PoliciesRequests",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"request\": [\r\n        {\r\n            \"requestId\": \"e4619679-f5d9-4eff-9f79-bbded6130bb1\",\r\n            \"status\": \"approved\",\r\n            \"expiryDuration\": \"string\",\r\n            \"constraints\": {}\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}{{base}}/policies/requests",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}{{base}}",
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create PoliciesRequests",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"request\": [\r\n        {\r\n            \"itemId\": \"string\",\r\n            \"itemType\": \"resource_server\",\r\n            \"expiryDuration\": \"string\",\r\n            \"constraints\": {\r\n                \"access\": [\r\n                    \"api\",\r\n                    \"subs\",\r\n                    \"ingest\",\r\n                    \"file\"\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}{{base}}/policies/requests",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}{{base}}",
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "List PoliciesRequests",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{host}}:{{port}}{{base}}/policies/requests",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}{{base}}",
							"path": [
								"policies",
								"requests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get KeyCloak Token [To set the ENV token]",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessTokenUrl",
							"value": "https://{{keycloackEndpoint}}/auth/realms/{{keycloackRealm}}/protocol/openid-connect/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://{{keycloackEndpoint}}/auth/realms/{{keycloackRealm}}/protocol/openid-connect/auth",
							"type": "string"
						},
						{
							"key": "redirect_uri",
							"value": "https://{{keycloackEndpoint}}/auth/realms/{{keycloackRealm}}/account/callback",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "",
							"type": "string"
						},
						{
							"key": "accessToken",
							"value": "",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "scope",
							"value": "email",
							"type": "string"
						},
						{
							"key": "state",
							"value": "12345678",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "account",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{provider_password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{provider_username}}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}/apis",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}",
					"path": [
						"apis"
					]
				},
				"description": "This API will Generate KeyCloack JWT.\nThe JWT will be used to generate token from iudx-aaa-server."
			},
			"response": []
		},
		{
			"name": "Get Certificate [JWT Authentication]",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{host}}:{{port}}{{base}}/cert",
					"protocol": "http",
					"host": [
						"{{host}}"
					],
					"port": "{{port}}{{base}}",
					"path": [
						"cert"
					]
				}
			},
			"response": []
		}
	]
}